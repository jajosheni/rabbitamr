rabbitamr_joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 20 # KEEP THIS AND THE diff_drive_controller THE SAME

rabbitamr_diff_drive_controller:
  type: "diff_drive_controller/DiffDriveController"
  left_wheel: 'left_wheel_joint'
  right_wheel: 'right_wheel_joint'
  publish_rate: 20.0               # default: 50
  pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
  twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]

  # Wheel separation and diameter. These are both optional.
  # diff_drive_controller will attempt to read either one or both from the
  # URDF if not specified as a parameter
  wheel_separation: 0.62
  wheel_radius: 0.1

  #Custom params
  milivolt_to_m_per_second: 6600.0 # default : 6600 mv -> 1m/s
  encoder_ticks_per_rotation: 2048.0 # default 2048.0
  plc_ip_connection: '192.168.5.200' # default 192.168.5.200

  # Velocity commands timeout [s], default 0.5
  cmd_vel_timeout: 0.25 # if there is no new message for 0.25 in cmd_vel topic stop the robot
  publish_cmd: true # publish the given velocity commands as a separate topic

  # Base frame_id
  base_frame_id: base_footprint #default: base_link

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
#  enable_odom_tf: false
#  estimate_velocity_from_position: false

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits: true
      max_velocity: 1.0  # m/s
      min_velocity: -1.0 # m/s
      has_acceleration_limits: true
      max_acceleration: 0.6  # m/s^2
      min_acceleration: -0.4 # m/s^2
      has_jerk_limits: true
      max_jerk: 5.0  # m/s^3
  angular:
    z:
      has_velocity_limits: true
      max_velocity: 1.57  # rad/s
      has_acceleration_limits: true
      max_acceleration: 1.0  # rad/s^2
      has_jerk_limits: true
      max_jerk: 2.5  # rad/s^3